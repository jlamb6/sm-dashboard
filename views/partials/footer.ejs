
        <script src="https://code.jquery.com/jquery-3.3.1.min.js" integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=" crossorigin="anonymous"></script>
        <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.js"></script>
        <script>
            $('.ui.pointing.menu').on('click', '.item', function() {
                if(!$(this).hasClass('active')) {
                    $(this).addClass('active')
                    .siblings('.item')
                    .removeClass('active');
                    let id = $(this).attr('id');
                    let containerName = `${id}-container`;
                    hideContentContainers();
                    console.log(containerName);
                    $(`#${containerName}`).show();
                }
            });
            
            function hideContentContainers() {
                $('.content-container').hide();
            }

            $('.ui.sticky').sticky({
                context: '#social-media-accounts',
                offset: 80
            });

            $('#accounts').on('click', function() {
                setTimeout(function() {
                    $('.ui.sticky').sticky('refresh');
                }, 500);
            });

            var options = {
                //root: document.querySelector('#scrollArea'),
                rootMargin: '80px',
                threshold: [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9 , 1.0]
            }
            let containers = Array.from(document.querySelectorAll(".account-container"));
                
            function observerCallback(entries, observer) {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        console.log(`intersecting at ${Math.floor(entry.intersectionRatio * 100)}%`);
                        //update 'top' of the .col-desc
                    }
                    else {
                        console.log("not intersecting");
                        //remove the observer from this element and move it to the next container
                    }
                    observeNextContainer(containers, entry.target, entries);
                });
            } 
            
            let observer = new IntersectionObserver(observerCallback, options);
            let target = $("#social-media-accounts")[0];
            observer.observe(target); 
            
            /**
            *  New, see what this does
            */
            let observersArr = [];
            /* 
            containers.forEach((cur, index) => {
                observersArr.push(new IntersectionObserver(observerCallback, options));
                observersArr[index].observe(cur);
            });
            */
            function observeNextContainer(containers, cur, entries) {
                let curIndex = containers.indexOf(cur);
                let curPosition = cur.style.top;
                console.log(`current position of container: ${curPosition}`);
                if (!entries.isIntersecting) {
                    let nextContainer = containers[curIndex + 1];
                    //observer.unobserve(cur);
                    //observer.observe(nextContainer);
                }
            }
            /** */

        </script>
    </body>
</html>